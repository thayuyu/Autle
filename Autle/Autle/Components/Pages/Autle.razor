@page "/"
@rendermode InteractiveServer


<PageTitle>Autle</PageTitle>

<h1>Welcome to Autle</h1>

@if (difficulty == "0")
{
    <h2>Choose a difficulty and start playing!</h2>
    <select @bind="@difficulty">
        <option value="0" disabled hidden>Select a Difficulty</option>
        <option value="Easy">Easy</option>
        <option value="Medium">Medium</option>
        <option value="Hard">Hard</option>
    </select>
}
else
{
    <h2>
        Guess A Car! - Difficulty: @difficulty
    </h2>
}


<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f0f0f0;
    }

    h1 {
        color: #333;
        text-align: center;
    }

    table {
        border-collapse: collapse;
        width: 100%;
        margin-top: 20px;
    }

    th, td {
        padding: 10px;
        text-align: center;
        border: 2px solid #333;
    }

    th {
        background-color: #ddd;
    }

    .custom-select {
        padding: 10px;
        width: 100%;
        margin-bottom: 20px;
    }

    .btn {
        background-color: #007bff;
        color: #fff;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        display: block;
        margin: auto;
        width: 300px;
    }

        .btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        .btn:hover {
            background-color: #0056b3;
        }

    .result-cell {
        font-weight: bold;
    }

    .correct {
        background-color: #4CAF50;
    }

    .incorrect {
        background-color: #E34234;
    }

    .nearcorrect {
        background-color: orange;
    }

    .win-message {
        background-color: #4CAF50;
        color: #fff;
        text-align: center;
        padding: 10px;
        font-weight: bold;
        margin-top: 20px;
    }
    
    .lose-message{
        background-color: #E34234;
        color:black;
        text-align: center;
        padding: 10px;
        font-weight: bold;
        margin-top: 20px;
    }

    .error-message {
        color: #FF0000;
        margin-top: 10px;
        font-weight: bold;
    }

    .selected-car {
        font-weight: bold;
        color: #333;
        text-align: center;
        margin-top: 20px;
    }

    .select-difficuly {
        width: 100px;
        height: 45px;
    }

    .car-option{
      padding:7px;
      border: 1px solid black;
    }
</style>

@if (IsWin == 0 && difficulty != "0")
{
    <select class="custom-select" size="@selSize" @onchange="ChangeSelSize">
        <option value="" selected disabled hidden>Select A Car</option>
        @foreach (var item in CarList)
        {
            <option class="car-option" value="@item.Name">@item.Manufacturer @item.Name</option>
        }
    </select>
    <button class="btn" @onclick="SubmitGuess">Submit</button>
}
else
{
    <select class="custom-select" @bind="selectedCarName" disabled>
        <option value="">Select A Car</option>
        @foreach (var item in CarList)
        {
            <option value="@item.Name">@item.Manufacturer @item.Name</option>
        }
    </select>
    <button class="btn" disabled>Submit</button>
}

<table>
    <thead>
        <tr>
            <th>Name</th>
            <th>Manufacturer</th>
            <th>Car Type</th>
            <th>Horse Power</th>
            <th>Engine</th>
            <th>Doors</th>
            <th>Model Year</th>
            <th>0-100 km/h (s)</th>
        </tr>
    </thead>
    <tbody>
        @if (selectedCar != null)
        {
            @foreach (var item in Guesses)
            {
                <tr>
                    @if (item.Name == SecretCar.Name)
                    {

                        <td class="correct">@item.Name</td>
                    }
                    else
                    {
                        <td class="incorrect">@item.Name</td>
                    }

                    @if (item.Manufacturer == SecretCar.Manufacturer)
                    {
                        <td class="correct">@item.Manufacturer</td>
                    }
                    else
                    {
                        <td class="incorrect">@item.Manufacturer</td>
                    }

                    @if (item.CarType == SecretCar.CarType)
                    {
                        <td class="correct">@item.CarType</td>
                    }
                    else
                    {
                        <td class="incorrect">@item.CarType</td>
                    }

                    @if (item.HorsePwr == SecretCar.HorsePwr)
                    {
                        <td class="correct">@item.HorsePwr HP</td>
                    }
                    else if (item.HorsePwr > SecretCar.HorsePwr)
                    {
                        @if (item.HorsePwr - SecretCar.HorsePwr <= 50)
                        {
                            <td class="nearcorrect">
                                @item.HorsePwr.ToString() HP <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1" />
                                </svg>
                            </td>
                        }
                        else
                        {
                            <td class="incorrect">
                                @item.HorsePwr.ToString() HP <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1" />
                                </svg>
                            </td>
                        }
                    }
                    else if (item.HorsePwr < SecretCar.HorsePwr)
                    {
                        @if (SecretCar.HorsePwr - item.HorsePwr <= 50)
                        {
                            <td class="nearcorrect">
                                @item.HorsePwr.ToString() HP <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5" />
                                </svg>
                            </td>
                        }
                        else
                        {
                            <td class="incorrect">
                                @item.HorsePwr.ToString() HP <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5" />
                                </svg>
                            </td>
                        }
                    }

                    @if (item.Engine == SecretCar.Engine)
                    {
                        <td class="correct">@item.Engine</td>
                    }
                    else
                    {
                        <td class="incorrect">@item.Engine</td>
                    }

                    @if (item.Doors == SecretCar.Doors)
                    {
                        <td class="correct">@item.Doors.ToString()</td>
                    }
                    else if (item.Doors > SecretCar.Doors)
                    {
                        <td class="incorrect">
                            @item.Doors.ToString() <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1" />
                            </svg>
                        </td>
                    }
                    else if (item.Doors < SecretCar.Doors)
                    {
                        <td class="incorrect">
                            @item.Doors <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5" />
                            </svg>
                        </td>
                    }

                    @if (item.ModelYear == SecretCar.ModelYear)
                    {
                        <td class="correct">@item.ModelYear.ToString()</td>
                    }
                    else if (item.ModelYear > SecretCar.ModelYear)
                    {
                        @if (item.ModelYear - SecretCar.ModelYear <= 5)
                        {
                            <td class="nearcorrect">
                                @item.ModelYear.ToString() <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1" />
                                </svg>
                            </td>
                        }
                        else
                        {
                            <td class="incorrect">
                                @item.ModelYear.ToString() <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1" />
                                </svg>
                            </td>
                        }

                    }
                    else if (item.ModelYear < SecretCar.ModelYear)
                    {
                        @if (SecretCar.ModelYear - item.ModelYear <= 5)
                        {
                            <td class="nearcorrect">
                                @item.ModelYear.ToString() <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5" />
                                </svg>
                            </td>
                        }
                        else
                        {
                            <td class="incorrect">
                                @item.ModelYear.ToString() <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5" />
                                </svg>
                            </td>
                        }
                    }

                    @if (item.ZeroToHundred == SecretCar.ZeroToHundred)
                    {
                        <td class="correct">@item.ZeroToHundred.ToString()s</td>
                    }
                    else if (item.ZeroToHundred > SecretCar.ZeroToHundred)
                    {
                        @if (item.ZeroToHundred - SecretCar.ZeroToHundred <= 0.5)
                        {
                            <td class="nearcorrect">
                                @item.ZeroToHundred.ToString()s <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1" />
                                </svg>
                            </td>
                        }
                        else
                        {
                            <td class="incorrect">
                                @item.ZeroToHundred.ToString()s <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1" />
                                </svg>
                            </td>
                        }
                    }
                    else if (item.ZeroToHundred < SecretCar.ZeroToHundred)
                    {
                        @if (SecretCar.ZeroToHundred - item.ZeroToHundred <= 0.5)
                        {
                            <td class="nearcorrect">
                                @item.ZeroToHundred.ToString()s <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5" />
                                </svg>
                            </td>
                        }
                        else
                        {
                            <td class="incorrect">
                                @item.ZeroToHundred.ToString()s <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5" />
                                </svg>
                            </td>
                        }
                    }
                </tr>
            }
        }
    </tbody>
</table>

@if (IsWin == 1)
{
    <div class="win-message">YOU WON! CONGRATULATIONS!</div>
    <button class="btn" @onclick="DifReset">Play again!</button>
    <button class="btn" @onclick="Reset">Change Difficulty?</button>
}
else if (IsWin == 2)
{
    <div class="lose-message">You lost, want to try again? The Car was: @SecretCar.Manufacturer @SecretCar.Name</div>
    <button class="btn" @onclick="DifReset">Have another go!</button>
    <button class="btn" @onclick="Reset">Change Difficulty?</button>


}

@if (notchosen)
{
    <div class="error-message">Please select a car before submitting.</div>
}

@if (alrchosen)
{
    <div class="error-message">This car has already been chosen.</div>
}



@code{
    // Variables declaration
    static public List<Car> CarList = GetCars();
    Car SecretCar = GetRandomCar(CarList);
    public List<Car> Guesses = new List<Car>();
    public Car selectedCar = null;
    public bool alrchosen;
    public string selectedCarName = "";
    public bool notchosen = false;
    public uint IsWin = 0;
    public string difficulty = "0";
    public int iteration = 1;
    public int? maxIterations = 0;
    public int selSize = 1;



    /// <summary>
    /// Resets all variables to their starting value.
    /// </summary>
    public void Reset()
    {
        notchosen = false;
        alrchosen = false;
        IsWin = 0;
        Guesses = new List<Car>();
        selectedCar = null;
        selectedCarName = "";
        SecretCar = GetRandomCar(CarList);
        difficulty = "0";
        iteration = 1;
        maxIterations = 0;
        selSize = 1;

    }

    /// <summary>
    /// Same as Reset() but keeps the same difficulty that has been chosen.
    /// </summary>
    public void DifReset()
    {
        notchosen = false;
        alrchosen = false;
        IsWin = 0;
        Guesses = new List<Car>();
        selectedCar = null;
        selectedCarName = "";
        SecretCar = GetRandomCar(CarList);
        iteration = 1;
        maxIterations = 0;
        selSize = 1;
    }

    ///  <summary>
    /// Function to get all cars that are saved in the code.
    /// </summary>
    /// <returns> List<Car> with all the cars with their respective information.</returns>
    static public List<Car> GetCars()
    {
        // TODO: Insert here data
        List<Car> list = new List<Car>
        {
            new Car(1, "Skyline R34 GT-R", "Nissan", "Coupe", 280, "I6", 2, 1999, 4.9),
            new Car(2, "350Z", "Nissan", "Sports car", 300, "V6", 2, 2006, 5.8),
            new Car(3, "R35 GT-R", "Nissan", "Sorts car / Grand tourer", 562, "V6", 2, 2016, 2.8),
            new Car(4, "Sprinter Trueno", "Toyota", "Sport compact", 128, "I4", 2, 1985, 8.5),
            new Car(5, "Corolla", "Toyota", "Compact", 120, "I4", 4, 2018, 9.3),
            new Car(6, "Impala", "Chevrolet", "Sedan", 197, "I4", 4, 2014, 6.5),
            new Car(7, "Corvette C8", "Chevrolet", "Sports car", 495, "V8", 2, 2020, 3.0),
            new Car(8, "Camaro SS", "Chevrolet", "Muscle car", 455, "V8", 2, 2016, 4.2),
            new Car(9, "Escallade", "Cadillac", "SUV", 681.5, "V8", 4, 2021, 4.8),
            new Car(10, "RX-7", "Mazda", "Sports car", 276, "2-Rotor", 2, 1998, 5.1),
            new Car(11, "MX-5", "Mazda", "Sports car", 181, "I4", 2, 2019, 7.1),
            new Car(12, "Mazda6", "Mazda", "Sedan", 227, "I4", 4, 2018, 7.6),
            new Car(13, "Alfa Romeo Giulia", "Stellantis Italy", "Compact executive car", 276, "I4", 4, 2016, 5.2),
            new Car(14, "Chiron", "Bugatti", "Sports car", 1479, "W16", 2, 2016, 2.4),
            new Car(15, "Lexus LFA", "Toyota", "Sports car", 563, "V10", 2, 2010, 3.7),
            new Car(16, "Lexus LC", "Toyota", "Grand tourer", 471, "V8", 2, 2018, 4.5),
            new Car(17, "Phantom", "Rolls Royce", "Ultra luxury car", 563, "V12", 4, 2017, 5.3),
            new Car(18, "Cullinan", "Rolls Royce", "luxury SUV", 563, "V12", 5, 2018, 5.2),
            new Car(19, "DB 12", "Aston Martin", "Grand Tourer", 671, "V8", 2, 2024, 3.7),
            new Car(20, "Sportage", "Kia", "Compact SUV", 150, "I4", 5, 2023, 11),
            new Car(21, "K5", "Kia", "Mid size car", 191, "I4", 4, 2021, 8.6),
            new Car(22, "Mercedes-Benz SLR McLaren", "McLaren Automotive", "Grand tourer", 617, "V8", 2, 2004, 3.6),
            new Car(23, "SLS AMG", "Mercedes-Benz", "Grand tourer", 563, "V8", 2, 2010, 3.8),
            new Car(24, "AMG GT", "Mercedes-Benz", "Grand tourer", 577, "V8", 2, 2017, 3.6),
            new Car(25, "S-Class", "Mercedes-Benz", "Full size luxury car", 362, "I6", 4, 2020, 5.1),
            new Car(26, "GLE 53", "Mercedes-Benz", "Mid size luxury crossover SUV", 434, "I6", 5, 2023, 5),
            new Car(27, "AMG G 63", "Mercedes-Benz", "Luxury SUV", 577, "V8", 5, 2018, 4.5),
            new Car(28, "GR Supra", "Toyota", "Sports car", 254.5, "I6", 3, 2020, 5.2),
            new Car(29, "Cybertruck", "Tesla", "Full-size pickup truck", 315, "Electric", 4, 2023, 6.5),
            new Car(30, "Roma", "Ferrari", "Coupe", 611.5, "V8", 2, 2019, 3.4),
            new Car(31, "LaFerrari", "Ferrari", "Sports car", 950, "V12", 2, 2013, 2.6),
            new Car(32, "458", "Ferrari", "Sports car", 562, "V8", 2, 2009, 3.4),
            new Car(33, "F40", "Ferrari", "Sports car", 471, "V8", 2, 1987, 4.7),
            new Car(34, "Aventador", "Lamborghini", "Sports car", 690, "V12", 2, 2012, 2.9),
            new Car(35, "Huracàn", "Lamborghini", "Sports car", 602, "V10", 2, 2014, 2.6),
            new Car(36, "Urus", "Lamborghini", "Mid-size luxury crossover SUV", 641, "V8", 5, 2018, 3.6),
            new Car(37, "Granturismo Trofeo", "Maserati", "Grand tourer", 542.5, "V6", 2, 2023, 3.5),
            new Car(38, "Willys MB Jeep", "Ford", "SUV", 60, "I4", 0, 1941, 0),
            new Car(39, "Camry", "Toyota", "Mid size car", 215, "I4", 4, 2018, 8.5),
            new Car(40, "Prius", "Toyota", "Small family car", 220, "I4", 4, 2023, 6.8),
            new Car(41, "Hilux", "Toyota", "Mid size pickup truck", 201, "I4", 2, 2015, 10.7),
            new Car(42, "Mustang", "Ford", "Muscle car", 300, "V6", 2, 2015, 6.1),
            new Car(43, "F150", "Ford", "Full size pickup truck", 290, "V6", 2, 2018, 8),
            new Car(44, "Fiesta", "Ford", "Supermini", 69, "I3", 3, 2017, 14.9),
            new Car(45, "Focus", "Ford", "Compact car", 84, "I3", 5, 2018, 13.5),
            new Car(46, "Model T", "Ford", "Economy car", 20, "I4", 0, 1908, 0),
            new Car(47, "NSX", "Honda", "Sports car", 573, "V6", 2, 2017, 3.2),
            new Car(48, "Civic Type R", "Honda", "Sports car", 316, "I4", 5, 2023, 5.4),
            new Car(49, "I8", "BMW", "Sports car", 369, "I3", 2, 2014, 4.4),
            new Car(50, "I3", "BMW", "Supermini", 167.5, "Electric", 5, 2014, 7.3),
        };


        List<Car> sortedList = list.OrderBy(car => car.Manufacturer).ThenBy(car => car.Name).ToList();

        return sortedList;
    }

    /// <summary>
    /// Adds the guessed car into the list of guesses and then checks if the car is the secret one, 
    /// if it is changes values of variable IsWin to 1 and the game ends, if it is not, depeneding 
    /// on the difficulty, checks if the player can guess again.
    /// </summary>
    /// <param name="SecretCar">Is the car that should be guessed</param>
    /// <param name="GuessedCar">Is the car that has just been guessed</param>
    public void GuessCar(Car SecretCar, Car GuessedCar)
    {
        if (difficulty == "Easy")
        {
            maxIterations = null;
        }
        else if (difficulty == "Medium")
        {
            maxIterations = 10;
        }
        else if (difficulty == "Hard")
        {
            maxIterations = 5;
        }

        Guesses.Add(GuessedCar);

        if (GuessedCar.CID == SecretCar.CID)
        {  
            IsWin = 1; 
        }
        else
        {
            if (maxIterations == null)
            {

            } 
            else if (maxIterations != 0 && iteration < maxIterations)
            {
                iteration++;
            }
            else
            {
                IsWin = 2;
            }
        }
    }


    /// <summary>
    /// Selects random car from given list.
    /// </summary>
    /// <param name="list">List where the random car will get chosen.</param>
    /// <returns>A random car from the given list.</returns>
    static public Car GetRandomCar(List<Car> list)
    {
        Random i = new Random();
        int index = i.Next(0, list.Count);
        return list[index];
    }

    ///  <summary>
    /// Checks if a car has been selected or if it has already been guessed.
    /// </summary>
    public void SubmitGuess()
    {
        if (IsWin == 0)
        {
            notchosen = false;
            alrchosen = false;
            if (selectedCarName == null || selectedCarName == "")
            {
                notchosen = true;
            }
            else
            {
                if (ListContains(Guesses, selectedCarName))
                {
                    alrchosen = true;
                }
                else
                {
                    selectedCar = CarList.Find(car => car.Name == selectedCarName);
                    GuessCar(SecretCar, selectedCar);
                }
            }
        }
    }

    public void ChangeSelSize(ChangeEventArgs e)
    {
        selectedCarName = e.Value.ToString();
        selSize = 7;
    }

    /// <summary>
    /// Basic function to check if a list contains the chosen car name
    /// </summary>
    /// <param name="list">list where the car has to be searched</param>
    /// <param name="car">name of the car that should be looked for</param>
    /// <returns>true if the car is in the list, false if the list doesn't contain the car.</returns>
    public bool ListContains(List<Car> list, string car)
    {
        foreach(var item in list)
        {
            if (car == item.Name)
            {
                return true;
            }
        }
        return false;
    }
}
